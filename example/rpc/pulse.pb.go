// Code generated by protoc-gen-go.
// source: pulse.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BeatReq struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *BeatReq) Reset()                    { *m = BeatReq{} }
func (m *BeatReq) String() string            { return proto.CompactTextString(m) }
func (*BeatReq) ProtoMessage()               {}
func (*BeatReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *BeatReq) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type BeatResp struct {
	Received string `protobuf:"bytes,1,opt,name=received" json:"received,omitempty"`
}

func (m *BeatResp) Reset()                    { *m = BeatResp{} }
func (m *BeatResp) String() string            { return proto.CompactTextString(m) }
func (*BeatResp) ProtoMessage()               {}
func (*BeatResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *BeatResp) GetReceived() string {
	if m != nil {
		return m.Received
	}
	return ""
}

func init() {
	proto.RegisterType((*BeatReq)(nil), "rpc.BeatReq")
	proto.RegisterType((*BeatResp)(nil), "rpc.BeatResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pulse service

type PulseClient interface {
	Beat(ctx context.Context, opts ...grpc.CallOption) (Pulse_BeatClient, error)
}

type pulseClient struct {
	cc *grpc.ClientConn
}

func NewPulseClient(cc *grpc.ClientConn) PulseClient {
	return &pulseClient{cc}
}

func (c *pulseClient) Beat(ctx context.Context, opts ...grpc.CallOption) (Pulse_BeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pulse_serviceDesc.Streams[0], c.cc, "/rpc.Pulse/Beat", opts...)
	if err != nil {
		return nil, err
	}
	x := &pulseBeatClient{stream}
	return x, nil
}

type Pulse_BeatClient interface {
	Send(*BeatReq) error
	Recv() (*BeatResp, error)
	grpc.ClientStream
}

type pulseBeatClient struct {
	grpc.ClientStream
}

func (x *pulseBeatClient) Send(m *BeatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pulseBeatClient) Recv() (*BeatResp, error) {
	m := new(BeatResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Pulse service

type PulseServer interface {
	Beat(Pulse_BeatServer) error
}

func RegisterPulseServer(s *grpc.Server, srv PulseServer) {
	s.RegisterService(&_Pulse_serviceDesc, srv)
}

func _Pulse_Beat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PulseServer).Beat(&pulseBeatServer{stream})
}

type Pulse_BeatServer interface {
	Send(*BeatResp) error
	Recv() (*BeatReq, error)
	grpc.ServerStream
}

type pulseBeatServer struct {
	grpc.ServerStream
}

func (x *pulseBeatServer) Send(m *BeatResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pulseBeatServer) Recv() (*BeatReq, error) {
	m := new(BeatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Pulse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Pulse",
	HandlerType: (*PulseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Beat",
			Handler:       _Pulse_Beat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pulse.proto",
}

func init() { proto.RegisterFile("pulse.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xcd, 0x29,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x52, 0xe5, 0x62,
	0x77, 0x4a, 0x4d, 0x2c, 0x09, 0x4a, 0x2d, 0x14, 0x92, 0xe2, 0xe2, 0x48, 0x2f, 0x4a, 0x4d, 0x2d,
	0xc9, 0xcc, 0x4b, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x95, 0xd4, 0xb8, 0x38,
	0x20, 0xca, 0x8a, 0x0b, 0x40, 0xea, 0x8a, 0x52, 0x93, 0x53, 0x33, 0xcb, 0x52, 0x53, 0x60, 0xea,
	0x60, 0x7c, 0x23, 0x03, 0x2e, 0xd6, 0x00, 0x90, 0x15, 0x42, 0xea, 0x5c, 0x2c, 0x20, 0x0d, 0x42,
	0x3c, 0x7a, 0x45, 0x05, 0xc9, 0x7a, 0x50, 0x2b, 0xa4, 0x78, 0x91, 0x78, 0xc5, 0x05, 0x1a, 0x8c,
	0x06, 0x8c, 0x49, 0x6c, 0x60, 0xc7, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0x09, 0x2e,
	0x64, 0x9b, 0x00, 0x00, 0x00,
}
