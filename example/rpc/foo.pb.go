// Code generated by protoc-gen-go.
// source: foo.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FooReq struct {
	Hello string `protobuf:"bytes,1,opt,name=hello" json:"hello,omitempty"`
}

func (m *FooReq) Reset()                    { *m = FooReq{} }
func (m *FooReq) String() string            { return proto.CompactTextString(m) }
func (*FooReq) ProtoMessage()               {}
func (*FooReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FooReq) GetHello() string {
	if m != nil {
		return m.Hello
	}
	return ""
}

type FooResp struct {
	World string `protobuf:"bytes,1,opt,name=world" json:"world,omitempty"`
}

func (m *FooResp) Reset()                    { *m = FooResp{} }
func (m *FooResp) String() string            { return proto.CompactTextString(m) }
func (*FooResp) ProtoMessage()               {}
func (*FooResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FooResp) GetWorld() string {
	if m != nil {
		return m.World
	}
	return ""
}

func init() {
	proto.RegisterType((*FooReq)(nil), "rpc.FooReq")
	proto.RegisterType((*FooResp)(nil), "rpc.FooResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Foo service

type FooClient interface {
	Chat(ctx context.Context, in *FooReq, opts ...grpc.CallOption) (*FooResp, error)
}

type fooClient struct {
	cc *grpc.ClientConn
}

func NewFooClient(cc *grpc.ClientConn) FooClient {
	return &fooClient{cc}
}

func (c *fooClient) Chat(ctx context.Context, in *FooReq, opts ...grpc.CallOption) (*FooResp, error) {
	out := new(FooResp)
	err := grpc.Invoke(ctx, "/rpc.Foo/Chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Foo service

type FooServer interface {
	Chat(context.Context, *FooReq) (*FooResp, error)
}

func RegisterFooServer(s *grpc.Server, srv FooServer) {
	s.RegisterService(&_Foo_serviceDesc, srv)
}

func _Foo_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Foo/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).Chat(ctx, req.(*FooReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Foo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Foo",
	HandlerType: (*FooServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Foo_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foo.proto",
}

func init() { proto.RegisterFile("foo.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcb, 0xcf, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x92, 0xe3, 0x62, 0x73, 0xcb,
	0xcf, 0x0f, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62, 0xcd, 0x48, 0xcd, 0xc9, 0xc9, 0x97, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0xe4, 0xb9, 0xd8, 0xc1, 0xf2, 0xc5, 0x05, 0x20, 0x05,
	0xe5, 0xf9, 0x45, 0x39, 0x29, 0x30, 0x05, 0x60, 0x8e, 0x91, 0x06, 0x17, 0xb3, 0x5b, 0x7e, 0xbe,
	0x90, 0x22, 0x17, 0x8b, 0x73, 0x46, 0x62, 0x89, 0x10, 0xb7, 0x5e, 0x51, 0x41, 0xb2, 0x1e, 0xc4,
	0x48, 0x29, 0x1e, 0x04, 0xa7, 0xb8, 0x20, 0x89, 0x0d, 0x6c, 0xad, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xac, 0x61, 0x95, 0x10, 0x83, 0x00, 0x00, 0x00,
}
