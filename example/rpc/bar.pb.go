// Code generated by protoc-gen-go.
// source: bar.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	bar.proto
	foo.proto

It has these top-level messages:
	BarReq
	BarResp
	FooReq
	FooResp
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BarReq struct {
	Say string `protobuf:"bytes,1,opt,name=say" json:"say,omitempty"`
}

func (m *BarReq) Reset()                    { *m = BarReq{} }
func (m *BarReq) String() string            { return proto.CompactTextString(m) }
func (*BarReq) ProtoMessage()               {}
func (*BarReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BarReq) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

type BarResp struct {
	Hear string `protobuf:"bytes,1,opt,name=hear" json:"hear,omitempty"`
}

func (m *BarResp) Reset()                    { *m = BarResp{} }
func (m *BarResp) String() string            { return proto.CompactTextString(m) }
func (*BarResp) ProtoMessage()               {}
func (*BarResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BarResp) GetHear() string {
	if m != nil {
		return m.Hear
	}
	return ""
}

func init() {
	proto.RegisterType((*BarReq)(nil), "rpc.BarReq")
	proto.RegisterType((*BarResp)(nil), "rpc.BarResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bar service

type BarClient interface {
	Talk(ctx context.Context, in *BarReq, opts ...grpc.CallOption) (*BarResp, error)
}

type barClient struct {
	cc *grpc.ClientConn
}

func NewBarClient(cc *grpc.ClientConn) BarClient {
	return &barClient{cc}
}

func (c *barClient) Talk(ctx context.Context, in *BarReq, opts ...grpc.CallOption) (*BarResp, error) {
	out := new(BarResp)
	err := grpc.Invoke(ctx, "/rpc.Bar/Talk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bar service

type BarServer interface {
	Talk(context.Context, *BarReq) (*BarResp, error)
}

func RegisterBarServer(s *grpc.Server, srv BarServer) {
	s.RegisterService(&_Bar_serviceDesc, srv)
}

func _Bar_Talk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServer).Talk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Bar/Talk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServer).Talk(ctx, req.(*BarReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Bar",
	HandlerType: (*BarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Talk",
			Handler:    _Bar_Talk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bar.proto",
}

func init() { proto.RegisterFile("bar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4a, 0x2c, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x92, 0xe2, 0x62, 0x73, 0x4a,
	0x2c, 0x0a, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0x2e, 0x4e, 0xac, 0x94, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x02, 0x31, 0x95, 0x64, 0xb9, 0xd8, 0xc1, 0x72, 0xc5, 0x05, 0x42, 0x42, 0x5c, 0x2c,
	0x19, 0xa9, 0x89, 0x45, 0x50, 0x59, 0x30, 0xdb, 0x48, 0x83, 0x8b, 0xd9, 0x29, 0xb1, 0x48, 0x48,
	0x91, 0x8b, 0x25, 0x24, 0x31, 0x27, 0x5b, 0x88, 0x5b, 0xaf, 0xa8, 0x20, 0x59, 0x0f, 0x62, 0x98,
	0x14, 0x0f, 0x82, 0x53, 0x5c, 0x90, 0xc4, 0x06, 0xb6, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x26, 0x3d, 0xfa, 0xca, 0x7d, 0x00, 0x00, 0x00,
}
